from fastapi import FastAPI, HTTPException, Request
import base64
from typing import Any


class LLMAssistant:
    """
    Stub class to simulate the behavior of a real LLM assistant.
    """

    def generate_response(self, image_data: str, timeout: int = 10) -> Any:
        """
        Simulates the generation of nutritional information based on image data.
        """
        return {
            "status": "success",
            "result": {
                "calories": 100,
                "proteins": 10,
                "fats": 20,
                "carbohydrates": 30,
            },
            "error": "",
        }


# Initialize FastAPI app
app = FastAPI()

# Instance of the stub assistant
assistant = LLMAssistant()


@app.post("/generate_response")
async def generate_response(request: Request) -> Any:
    """
    Generates a response based on the Base64-encoded image string provided in the request.

    Args:
        The request should contain a JSON body with a 'image_base64' field that contains
        the Base64 encoded image data.

    Returns:
        Any: The response generated by the assistant.

    Raises:
        HTTPException:
            - 400: If the Base64 decoding fails.
            - 504: If a TimeoutError occurs.
            - 500: If an unexpected error occurs.
    """
    try:
        data = await request.json()
        image_base64 = data.get("image_base64")
        if not image_base64:
            raise HTTPException(status_code=400, detail="Base64 image data is required.")

        try:
            base64.b64decode(image_base64)
        except Exception as e:
            raise HTTPException(
                status_code=400, detail=f"Invalid Base64 string: {str(e)}"
            )

        result = assistant.generate_response(image_base64)

        return result

    except TimeoutError as te:
        raise HTTPException(
            status_code=504, detail="Request timed out: " + str(te)
        ) from te

    except HTTPException as he:
        raise HTTPException(status_code=he.status_code, detail=he.detail) from he
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"An unexpected error occurred: {str(e)}"
        ) from e